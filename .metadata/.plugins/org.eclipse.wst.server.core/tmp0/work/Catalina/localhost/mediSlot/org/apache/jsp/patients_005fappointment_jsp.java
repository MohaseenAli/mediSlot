/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-04-21 12:22:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import com.mediSlot.dao.*;
import com.mediSlot.model.*;
import com.mediSlot.service.*;
import com.mediSlot.util.*;

public final class patients_005fappointment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("com.mediSlot.model");
    _jspx_imports_packages.add("com.mediSlot.service");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("com.mediSlot.dao");
    _jspx_imports_packages.add("com.mediSlot.util");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("java.util.List");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>MediSlot</title>\r\n");
      out.write("<link href=\"assets/image/icon.png\" rel=\"icon\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" />\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	padding: 0;\r\n");
      out.write("	background-color: #f7f7f7;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar {\r\n");
      out.write("	background-color: #2b92ff;\r\n");
      out.write("	height: 55px;\r\n");
      out.write("	border-bottom: 2px solid #93c7ff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-brand {\r\n");
      out.write("	font-size: 35px;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	color: #ffffff !important;\r\n");
      out.write("	justify-content: left;\r\n");
      out.write("	align-content: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-nav .nav-link {\r\n");
      out.write("	font-size: 15px;\r\n");
      out.write("	color: #ffffff !important;\r\n");
      out.write("	border: 1px solid rgb(242, 242, 242); /* Add border */\r\n");
      out.write("	border-radius: 0.6rem;\r\n");
      out.write("	padding: 0.2rem; /* Add padding */\r\n");
      out.write("	margin: 1rem;\r\n");
      out.write("	transition: transform 0.3s ease; /* Smooth transition on hover */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".navbar-nav .nav-link:hover {\r\n");
      out.write("	border-color: rgba(56, 75, 179, 0.5); /* Change border color on hover */\r\n");
      out.write("	transform: translateY(-3px); /* Move link up slightly */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	background-color: #ffffff;\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	border-radius: 12px;\r\n");
      out.write("	box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n");
      out.write("	overflow-x: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("h1 {\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	margin-bottom: 30px;\r\n");
      out.write("	color: #2c3e50;\r\n");
      out.write("	text-shadow: 2px 2px 2px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	border-collapse: collapse;\r\n");
      out.write("	border-radius: 12px;\r\n");
      out.write("	overflow: hidden;\r\n");
      out.write("	border: 2px solid #2c3e50;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	border-bottom: 1px solid #ddd;\r\n");
      out.write("	text-align: left;\r\n");
      out.write("	transition: background-color 0.3s ease;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("	background-color: #2b92ff;\r\n");
      out.write("	color: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr:nth-child(even) {\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr:hover {\r\n");
      out.write("	background-color: #dbdbdb;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	try {
		// Fetch data from the database
		DBConnection dbConnection = DBConnection.getDbConnection();
		AppointmentDao appointmentDao = new AppointmentDao(dbConnection);
		PatientDao patientDao = new PatientDao(dbConnection);

		AppointmentService appointmentService = new AppointmentService(appointmentDao);
		PatientService patientService = new PatientService(patientDao);

		String phoneNo = (String) session.getAttribute("phoneNo");
		Patient patient = patientService.findByPhoneNo(phoneNo);
		int patientID = patient.getPatientId();
		List<Appointment> appointments = appointmentService.findByPatinetId(patientID);
	
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<header>\r\n");
      out.write("		<nav class=\"navbar navbar-expand-lg navbar-light\">\r\n");
      out.write("			<p class=\"navbar-brand\"\r\n");
      out.write("				style=\"font-family: cursive; margin-top: 16px\">MediSlot</p>\r\n");
      out.write("			<div class=\"navbar-collapse\">\r\n");
      out.write("				<ul class=\"navbar-nav ml-auto\">\r\n");
      out.write("					<li class=\"nav-item nav-link\"\r\n");
      out.write("						style=\"border: 0px; font-weight: bolder; font-size: 1.2rem;\">Welcome!\r\n");
      out.write("						");
      out.print(patient.getFullName());
      out.write("</li>\r\n");
      out.write("					<li class=\"nav-item\"><a class=\"nav-link\"\r\n");
      out.write("						href=\"patient_dashboard.jsp\">Go To Dashboard</a></li>\r\n");
      out.write("				</ul>\r\n");
      out.write("			</div>\r\n");
      out.write("		</nav>\r\n");
      out.write("	</header>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		");

		if (appointments != null) {
		
      out.write("\r\n");
      out.write("		<h1 align=\"center\">Patient Appointments</h1>\r\n");
      out.write("		<table>\r\n");
      out.write("			<thead>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th>Patient Name</th>\r\n");
      out.write("					<th>Date</th>\r\n");
      out.write("					<th>Time</th>\r\n");
      out.write("					<th>Reason</th>\r\n");
      out.write("					<th>Doctor Name</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</thead>\r\n");
      out.write("			<tbody>\r\n");
      out.write("				");

				// Display each appointment
				for (Appointment appointment : appointments) {
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td>");
      out.print(patient.getFullName());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(appointment.getAppointmentDate());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(appointment.getAppointmentTime());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(appointment.getAppointmentReason());
      out.write("</td>\r\n");
      out.write("					<td>");
      out.print(appointment.getDoctorSchedule().getDoctor().getDoctorName());
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("				</tr>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("			</tbody>\r\n");
      out.write("		</table>\r\n");
      out.write("		");

		} else {
		
      out.write("\r\n");
      out.write("		<h1 style=\"color: #2b92ff; text-align: center\">YOU DON'T HAVE ANY\r\n");
      out.write("			APPOINTMENT</h1>\r\n");
      out.write("		");

		}
		} catch (Exception e) {
		response.sendRedirect("error.jsp");
		}
		
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
