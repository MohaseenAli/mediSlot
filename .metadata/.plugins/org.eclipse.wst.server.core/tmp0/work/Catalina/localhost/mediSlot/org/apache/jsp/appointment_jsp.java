/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.19
 * Generated at: 2024-04-21 12:33:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.mediSlot.dao.DoctorScheduleDao;
import java.util.ArrayList;
import java.util.List;
import com.mediSlot.dao.DoctorDao;
import com.mediSlot.model.Doctor;
import com.mediSlot.util.DBConnection;

public final class appointment_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("com.mediSlot.util.DBConnection");
    _jspx_imports_classes.add("com.mediSlot.dao.DoctorScheduleDao");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.mediSlot.dao.DoctorDao");
    _jspx_imports_classes.add("com.mediSlot.model.Doctor");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\" />\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("<title>MediSlot</title>\r\n");
      out.write("<link href=\"assets/image/icon.png\" rel=\"icon\">\r\n");
      out.write("<!-- Bootstrap CSS -->\r\n");
      out.write("<link\r\n");
      out.write("	href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\r\n");
      out.write("	rel=\"stylesheet\" />\r\n");
      out.write("<!-- Custom CSS -->\r\n");
      out.write("<style>\r\n");
      out.write("body {\r\n");
      out.write("	background-color: #eaf0f6; /* Light blue background */\r\n");
      out.write("	padding-top: 40px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container {\r\n");
      out.write("	max-width: 600px;\r\n");
      out.write("	margin: auto;\r\n");
      out.write("	background-color: rgba(255, 255, 255, 0.8);\r\n");
      out.write("	/* Semi-transparent white form background */\r\n");
      out.write("	padding: 40px;\r\n");
      out.write("	border-radius: 10px;\r\n");
      out.write("	box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container h2 {\r\n");
      out.write("	color: #007bff; /* Blue header text */\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	margin-bottom: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container .form-group label {\r\n");
      out.write("	color: #007bff; /* Blue label text */\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container .form-group {\r\n");
      out.write("	margin-bottom: 20px; /* Add margin to the bottom */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container .btn-primary {\r\n");
      out.write("	background-color: #007bff; /* Blue button background */\r\n");
      out.write("	border-color: #007bff;\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("	transition: background-color 0.3s;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".form-container .btn-primary:hover {\r\n");
      out.write("	background-color: #0056b3; /* Darker blue on hover */\r\n");
      out.write("	border-color: #0056b3;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".error-message {\r\n");
      out.write("	color: #dc3545; /* Red error message text */\r\n");
      out.write("	font-size: 14px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	try {
	
      out.write("\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<div class=\"form-container\">\r\n");
      out.write("			<h2>Appointment Form</h2>\r\n");
      out.write("			");

			String error = (String) session.getAttribute("timeError");
			if (error != null) {
			
      out.write("\r\n");
      out.write("			<p style=\"color: red; display: flex; justify-content: center\">");
      out.print(error);
      out.write("</p>\r\n");
      out.write("			");

			session.removeAttribute("loginError");
			}
			
      out.write("\r\n");
      out.write("			<form id=\"appointmentForm\" method=\"post\" action=\"bookedAppointment\">\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"gender\">Gender</label> <select class=\"form-control\"\r\n");
      out.write("						id=\"gender\" name=\"gender\" required>\r\n");
      out.write("						<option value=\"\">Select Gender</option>\r\n");
      out.write("						<option value=\"Male\">Male</option>\r\n");
      out.write("						<option value=\"Female\">Female</option>\r\n");
      out.write("						<option value=\"Other\">Other</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"age\">Age</label> <input type=\"number\"\r\n");
      out.write("						class=\"form-control\" id=\"age\" name=\"age\"  min=\"1\" max=\"110\"\r\n");
      out.write("						placeholder=\"Enter Age\" required />\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"bloodGroup\">Blood Group</label> <select\r\n");
      out.write("						class=\"form-control\" id=\"bloodGroup\" name=\"bloodGroup\" required>\r\n");
      out.write("						<option value=\"\">Select Blood Group</option>\r\n");
      out.write("						<option value=\"A+\">A+</option>\r\n");
      out.write("						<option value=\"A-\">A-</option>\r\n");
      out.write("						<option value=\"B+\">B+</option>\r\n");
      out.write("						<option value=\"B-\">B-</option>\r\n");
      out.write("						<option value=\"O+\">O+</option>\r\n");
      out.write("						<option value=\"O-\">O-</option>\r\n");
      out.write("						<option value=\"AB+\">AB+</option>\r\n");
      out.write("						<option value=\"AB-\">AB-</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"address\">Address</label>\r\n");
      out.write("					<textarea class=\"form-control\" id=\"address\" name=\"address\" rows=\"3\"\r\n");
      out.write("						placeholder=\"Enter Address\" required></textarea>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				");

				DBConnection dbConnection = DBConnection.getDbConnection();
				DoctorDao doctorDao = new DoctorDao(dbConnection);
				List<Doctor> doctors = doctorDao.findAll();
				
      out.write("\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"doctor\">Doctor</label> <select class=\"form-control\"\r\n");
      out.write("						id=\"doctor\" name=\"doctor\" onchange=\"loadAppointmentDates()\"\r\n");
      out.write("						required>\r\n");
      out.write("						<option value=\"\">Select Doctor</option>\r\n");
      out.write("						");

						for (Doctor doctor : doctors) {
						
      out.write("\r\n");
      out.write("						<option value=\"");
      out.print(doctor.getDoctorId());
      out.write('"');
      out.write('>');
      out.print(doctor.getDoctorName());
      out.write("</option>\r\n");
      out.write("						");

						}
						
      out.write("\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"preferredDate\">Select Date for the Appointment</label>\r\n");
      out.write("					<select class=\"form-control\" id=\"preferredDate\"\r\n");
      out.write("						name=\"preferredDate\" onchange=\"loadAppointmentTimes()\" required>\r\n");
      out.write("						<option value=\"\">Select Doctor First</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"preferredTime\">Select Time for the Appointment</label>\r\n");
      out.write("					<select class=\"form-control\" id=\"preferredTime\"\r\n");
      out.write("						name=\"preferredTime\" required>\r\n");
      out.write("						<option value=\"\">Select Doctor And Date First</option>\r\n");
      out.write("					</select>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<div class=\"form-group\">\r\n");
      out.write("					<label for=\"appointmentReason\">Reason for the Appointment</label>\r\n");
      out.write("					<textarea class=\"form-control\" id=\"appointmentReason\"\r\n");
      out.write("						name=\"appointmentReason\" rows=\"3\"\r\n");
      out.write("						placeholder=\"Enter Reason for Appointment\" required></textarea>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<button type=\"submit\" class=\"btn btn-primary btn-block\">\r\n");
      out.write("					Check For Appointment</button>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		// Get current date in YYYY-MM-DD format\r\n");
      out.write("		let currentDate = new Date().toISOString().split('T')[0];\r\n");
      out.write("\r\n");
      out.write("		// Set the minimum date attribute of the date input\r\n");
      out.write("		document.getElementById('preferredDate').min = currentDate;\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- For Date -->\r\n");
      out.write("	<script>\r\n");
      out.write("    function loadAppointmentDates() {\r\n");
      out.write("        var doctorId = document.getElementById('doctor').value;\r\n");
      out.write("        if (doctorId) {\r\n");
      out.write("            // Send an AJAX request to fetch available appointment times\r\n");
      out.write("            fetch('getAvailableDates?doctorId=' + doctorId)\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("            	\r\n");
      out.write("                var dateSelect = document.getElementById('preferredDate');\r\n");
      out.write("                dateSelect.innerHTML = ''; // Clear previous options\r\n");
      out.write("                if (data.length > 0) {\r\n");
      out.write("                	 var option = document.createElement('option');\r\n");
      out.write("                     option.value = '';\r\n");
      out.write("                     option.text = 'Select Date';\r\n");
      out.write("                     dateSelect.appendChild(option);\r\n");
      out.write("                    data.forEach(date => {\r\n");
      out.write("                        var option = document.createElement('option');\r\n");
      out.write("                        option.value = date;\r\n");
      out.write("                        option.text = date;\r\n");
      out.write("                        dateSelect.appendChild(option);\r\n");
      out.write("                    });\r\n");
      out.write("                } else {\r\n");
      out.write("                    var option = document.createElement('option');\r\n");
      out.write("                    option.value = '';\r\n");
      out.write("                    option.text = 'No Date available';\r\n");
      out.write("                    dateSelect.appendChild(option);\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error('Error fetching appointment times:', error);\r\n");
      out.write("            });\r\n");
      out.write("        } else {\r\n");
      out.write("            // Clear the time options if no doctor is selected\r\n");
      out.write("            document.getElementById('preferredDate').innerHTML = '<option value=\"\">Select Doctor First</option>';\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<!-- For Time -->\r\n");
      out.write("	<script>\r\n");
      out.write("    function loadAppointmentTimes() {\r\n");
      out.write("        var doctorId = document.getElementById('doctor').value;\r\n");
      out.write("        var preferredDate = document.getElementById('preferredDate').value;\r\n");
      out.write("        if (doctorId && preferredDate) {\r\n");
      out.write("            // Send an AJAX request to fetch available appointment times\r\n");
      out.write("            fetch('getAvailableTimes?doctorId=' + doctorId+'&preferredDate='+preferredDate)\r\n");
      out.write("            .then(response => response.json())\r\n");
      out.write("            .then(data => {\r\n");
      out.write("                var timeSelect = document.getElementById('preferredTime');\r\n");
      out.write("                timeSelect.innerHTML = ''; // Clear previous options\r\n");
      out.write("                if (data.length > 0) {\r\n");
      out.write("                	 var option = document.createElement('option');\r\n");
      out.write("                     option.value = '';\r\n");
      out.write("                     option.text = 'Select time';\r\n");
      out.write("                     timeSelect.appendChild(option);\r\n");
      out.write("                    data.forEach(time => {\r\n");
      out.write("                        var option = document.createElement('option');\r\n");
      out.write("                        option.value = time;\r\n");
      out.write("                        option.text = time;\r\n");
      out.write("                        timeSelect.appendChild(option);\r\n");
      out.write("                    });\r\n");
      out.write("                } else {\r\n");
      out.write("                    var option = document.createElement('option');\r\n");
      out.write("                    option.value = '';\r\n");
      out.write("                    option.text = 'No time available';\r\n");
      out.write("                    timeSelect.appendChild(option);\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("            .catch(error => {\r\n");
      out.write("                console.error('Error fetching appointment times:', error);\r\n");
      out.write("            });\r\n");
      out.write("        } else {\r\n");
      out.write("            // Clear the time options if no doctor is selected\r\n");
      out.write("            document.getElementById('preferredTime').innerHTML = '<option value=\"\">Select Doctor And Date First</option>';\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("	");

	} catch (Exception e) {
	response.sendRedirect("error.jsp");
	}
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
